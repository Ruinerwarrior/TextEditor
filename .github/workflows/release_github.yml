name: release_github
on: 
  workflow_dispatch:
    inputs:
      BUMB_VERSION_PART:
        description: 'version part to bumb, can be MAJOR, MINOR or PATCH'     
        required: true
        default: 'PATCH'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
jobs:
  git_version_update:
    runs-on: ubuntu-latest
    outputs:
      new_version_tag: ${{steps.update_git_tag.outputs.new_version_tag}}
      new_version: ${{steps.update_git_tag.outputs.new_version}}
      test: "test1"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        ssh-key: "${{ secrets.TEXTEDITORCOMMITKEY }}"

    - name: Get git tag
      id: get_git_tag
      run: cmake -P GetGitTag.cmake

    - name: Update git tag version
      id: update_git_tag
      run: cmake -DBUMB_VERSION=${{github.event.inputs.BUMB_VERSION_PART}} -DCURRENT_TAG=${{steps.get_git_tag.outputs.current_version_tag}} -P BumbVersion.cmake

  build:
    runs-on: ${{ matrix.os }}
    needs: git_version_update
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
        - os: macos-latest
        - os: ubuntu-latest
        - os: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ssh-key: "${{ secrets.TEXTEDITORCOMMITKEY }}"
          
      - name: Configure CMake
        working-directory: ${{github.workspace}}
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -S . -B ./build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCURRENT_VERSION="${{needs.git_version_update.outputs.new_version}}" -DBUILD_TESTS=ON

      - name: Build
        working-directory: ${{github.workspace}}
        run: cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV --no-compress-output -T Test
        
      - name: Create Installer
        working-directory: ${{github.workspace}}/build
        # Create installer defined by the CMake configuration
        # See https://cmake.org/cmake/help/latest/module/CPack.html for more detail
        run: cpack -C Release
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.3.0
        with:
          # Artifact name
          name: ${{ matrix.os }}
          path: build/installer

  release:
    runs-on: ubuntu-latest
    needs: [git_version_update, build]
    steps:      
      - name: Download windows build
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: windows-latest
          # Destination path
          path: windows-latest
          
      - name: Download ubuntu build
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: ubuntu-latest
          # Destination path
          path: ubuntu-latest
          
      - name: Download macos build
        uses: actions/download-artifact@v2.1.0
        with:
          # Artifact name
          name: macos-latest
          # Destination path
          path: macos-latest   
          
      - run: ls -lR | more      
      
      - name: Get Asset Name
        id: get_asset_name
        run:  echo ::set-output name=filename::"TextEditor-${{needs.git_version_update.outputs.new_version}}-win64.zip"

      
      - name: Get windows asset size
        id: windows_asset_size
        run: |
           echo ::set-output name=size::$(stat --format=%s "windows-latest/${{steps.get_asset_name.outputs.filename}}")
        
      - run: echo ${{steps.windows_asset_size.outputs.size}}
      
      - run: echo ${{needs.git_version_update.outputs.new_version_tag}}

      - name: Create Release
        id: create_release
        run: |
            echo ::set-output name=create_release_result::$(curl \
            --request POST \
            --header "authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            --header "Accept: application/vnd.github.v3+json" \
            --url "https://api.github.com/repos/Ruinerwarrior/TextEditor/releases" \
            --data '{
             "tag_name": "${{needs.git_version_update.outputs.new_version_tag}}",
             "discussion_category_name": "Announcements"
             }')
 
      - run: echo ${{steps.create_release.outputs.create_release_result}}

      - name: Upload windows release assets
        run: |
          curl -X POST \
          -H "Content-Length: ${{steps.windows_asset_size.outputs.size}}"
          -H "Content-Type: application/octet-stream" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -T "windows-latest/${{steps.get_asset_name.outputs.filename}}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://uploads.github.com/repos/Ruinerwarrior/TextEditor/releases/${{fromJson(steps.create_release.outputs.create_release_result).id}}/assets?name=${{steps.get_asset_name.outputs.filename}}" | cat
